name: Build and deploy

on:
  push:
    tags: ["v*", "dev*"]

jobs:
  build-and-deploy:
    name: "Build and deploy (${{ matrix.name }})"
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 'Linux x64'
            os: ubuntu-24.04
            qt_version: '6.8.3'
            qt_host: linux
            qt_target: desktop
            qt_arch: linux_gcc_64
            artifact_name: linux-x64
            qt_tools: ''
            build_command: 'make desktop'
            installer_command: ''

          - name: 'Linux ARM64'
            os: ubuntu-24.04-arm
            qt_version: '6.8.3'
            qt_host: linux_arm64
            qt_target: desktop
            qt_arch: linux_gcc_arm64
            artifact_name: linux-arm64
            qt_tools: ''
            build_command: 'make desktop'
            installer_command: ''

          - name: 'Linux ARM64 (Bookworn GLIBC)'
            os: ubuntu-22.04-arm
            qt_version: '6.7.0'
            qt_host: linux_arm64
            qt_target: desktop
            qt_arch: linux_gcc_arm64
            artifact_name: bookworm-arm64-rpi
            qt_tools: 'tools_ifw'
            build_command: 'make desktop'
            installer_command: 'make installer'

          - name: 'Windows x64'
            os: windows-2025
            qt_version: '6.8.3'
            qt_host: windows
            qt_target: desktop
            qt_arch: win64_msvc2022_64
            artifact_name: windows-x64
            qt_tools: ''
            build_command: 'make desktop'
            installer_command: ''

          - name: 'Windows ARM64'
            os: windows-11-arm
            qt_version: '6.8.3'
            qt_host: windows_arm64
            qt_target: desktop
            qt_arch: win64_msvc2022_arm64
            artifact_name: windows-arm64
            qt_tools: ''
            build_command: 'make desktop'
            installer_command: ''

          - name: 'macOS-15 ARM64'
            os: macos-15
            qt_version: '6.8.3'
            qt_host: mac
            qt_target: desktop
            qt_arch: clang_64
            artifact_name: macos-15-arm64
            qt_tools: ''
            build_command: 'make desktop'
            installer_command: ''

          - name: 'Web'
            os: ubuntu-24.04
            qt_version: '6.8.3'
            qt_host: all_os
            qt_target: wasm
            qt_arch: wasm_multithread
            qt_modules: 'qtquick3d qtshadertools qtmultimedia qtquicktimeline'
            artifact_name: web
            qt_tools: ''
            build_command: 'make web'
            installer_command: 'make upload-web'

    env:
      qt_modules: 'qtquick3d qtshadertools qtmultimedia qtquicktimeline'
      target_folder: 'Kerfur'
      source_folder: '${{ github.workspace }}/install/'
      EMSDK: '${{ github.workspace }}/emsdk'
      CDN_UPLOAD_SOCKET: ${{ secrets.CDN_UPLOAD_IP }}
      CDN_UPLOAD_USERNAME: ${{ secrets.CDN_UPLOAD_USER }}
      CDN_UPLOAD_PASSWORD: ${{ secrets.CDN_UPLOAD_PW }}
      WASM_UPLOAD_SOCKET: ${{ secrets.WASM_UPLOAD_IP }}
      WASM_UPLOAD_USERNAME: ${{ secrets.WASM_UPLOAD_USER }}
      WASM_UPLOAD_PASSWORD: ${{ secrets.WASM_UPLOAD_PW }}

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: 'recursive'
          lfs: 'true'

      - name: Get latest CMake and Ninja
        uses: lukka/get-cmake@v4.0.2
        with:
            cmakeVersion: latest
            ninjaVersion: latest

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        shell: bash
        continue-on-error: true
        run: |
          sudo apt-get update
          sudo apt-get -y install jq lftp brotli expect ccache \
            libunwind-dev \
            libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
            libgstreamer-plugins-good1.0-dev libgstreamer-plugins-bad1.0-dev \
            gstreamer1.0-plugins-base gstreamer1.0-plugins-good \
            gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly \
            gstreamer1.0-libav gstreamer1.0-tools gstreamer1.0-x \
            gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 \
            gstreamer1.0-qt5 gstreamer1.0-pulseaudio

      - name: Setup MSVC
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2

      - name: Install Qt
        uses: Kidev/install-qt-action@v5
        with:
          version: ${{ matrix.qt_version }}
          host: ${{ matrix.qt_host }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          modules: ${{ env.qt_modules }}
          dir: ${{ github.workspace }}
          cache: 'true'
          cache-key-prefix: 'install-qt-${{ matrix.qt_version }}-${{ matrix.qt_arch }}'
          tools: ${{ matrix.qt_tools }}

      - name: Install Emscripten SDK (Web only)
        if: (matrix.artifact_name == 'web')
        shell: bash
        run: |
          make emsdk
          echo 'source "./emsdk/emsdk_env.sh"' >> "$GITHUB_PATH"

      - name: Get Version
        id: get_version
        shell: bash
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
            if [[ $TAG == v* ]]; then
              VERSION="$TAG"
              VERSION_TAG="${TAG#v}"
            else
              VERSION="v$TAG"
              VERSION_TAG="$TAG"
            fi
            echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
            echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_OUTPUT
          else
            LATEST_V_TAG=$(git describe --tags --match "v*" --abbrev=0 2>/dev/null || echo "v0.0.0")
            BASE_VERSION="${LATEST_V_TAG#v}"

            if git describe --tags --match "v*" --abbrev=0 >/dev/null 2>&1; then
              TWEAK=$(git rev-list --count ${LATEST_V_TAG}..HEAD)
            else
              TWEAK=$(git rev-list --count HEAD)
            fi

            VERSION="v${BASE_VERSION}-dev-${TWEAK}"
            VERSION_TAG="${BASE_VERSION}.${TWEAK}"
            echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
            echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_OUTPUT
          fi

      - name: Build
        shell: bash
        run: |
          ${{ matrix.build_command }} VERSION_TAG=${{ steps.get_version.outputs.VERSION_TAG }}

      - name: Craft installer
        if: ${{ matrix.installer_command }} != ''
        shell: bash
        run: |
          ${{ matrix.installer_command }} VERSION_TAG=${{ steps.get_version.outputs.VERSION_TAG }}

      - name: Create AppImage (Linux only)
        if: runner.os == 'Linux' && matrix.artifact_name != 'web'
        shell: bash
        run: |
          ARCH=$(uname -m)
          if [ "$ARCH" = "x86_64" ]; then
            LINUXDEPLOY_ARCH="x86_64"
          elif [ "$ARCH" = "aarch64" ]; then
            LINUXDEPLOY_ARCH="aarch64"
          else
            echo "Unsupported architecture: $ARCH"
            exit 1
          fi

          echo "Downloading linuxdeploy for architecture: $LINUXDEPLOY_ARCH"

          wget -O linuxdeploy-${LINUXDEPLOY_ARCH}.AppImage "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-${LINUXDEPLOY_ARCH}.AppImage"
          wget -O linuxdeploy-plugin-qt-${LINUXDEPLOY_ARCH}.AppImage "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-${LINUXDEPLOY_ARCH}.AppImage"
          chmod +x linuxdeploy-${LINUXDEPLOY_ARCH}.AppImage linuxdeploy-plugin-qt-${LINUXDEPLOY_ARCH}.AppImage

          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps

          cp -r ${{ env.source_folder }}/* AppDir/usr/

          cp assets/logo.png AppDir/usr/share/icons/hicolor/256x256/apps/kerfur.png

          cat > AppDir/AppRun << 'EOF'
          #!/bin/bash
          HERE="$(dirname "$(readlink -f "${0}")")"
          exec "${HERE}/usr/bin/kerfur" "$@"
          EOF
          chmod +x AppDir/AppRun

          cat > AppDir/usr/share/applications/kerfur.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=Kerfur
          Exec=AppRun
          Icon=kerfur
          Categories=Utility;
          EOF

          export QT_DIR="$(dirname $(which qmake))/.."
          export QML_SOURCES_PATHS="$(pwd)"

          export LINUXDEPLOY_PLUGIN_QT_IGNORE_PLATFORMS="minimal"
          export LINUXDEPLOY_PLUGIN_QT_IGNORE_IMAGEFORMATS=""

          if ! ./linuxdeploy-${LINUXDEPLOY_ARCH}.AppImage --appdir AppDir --plugin qt --output appimage; then
            echo "Failed with multimedia plugins, trying without problematic multimedia plugins..."

            find AppDir -name "*gstreamer*" -type f -delete 2>/dev/null || true
            find AppDir -name "*multimedia*" -path "*/plugins/*" -type f -delete 2>/dev/null || true

            ./linuxdeploy-${LINUXDEPLOY_ARCH}.AppImage --appdir AppDir --plugin qt --output appimage
          fi

          echo "Available AppImages before rename:"
          ls -la *.AppImage

          GENERATED_APPIMAGE=$(find . -name "*.AppImage" -not -name "linuxdeploy*" | head -1)
          if [ -n "$GENERATED_APPIMAGE" ]; then
            echo "Renaming $GENERATED_APPIMAGE to Kerfur-${{ matrix.artifact_name }}-${{ steps.get_version.outputs.VERSION }}.AppImage"
            mv "$GENERATED_APPIMAGE" "Kerfur-${{ matrix.artifact_name }}-${{ steps.get_version.outputs.VERSION }}.AppImage"
          else
            echo "Warning: No generated AppImage found to rename"
            ls -la *.AppImage
          fi

      - name: Package artifacts
        if: "!(matrix.artifact_name == 'web')"
        shell: bash
        run: |
          mkdir -p artifacts
          if [ "${{ runner.os }}" = "Windows" ]; then
            7z a "artifacts/Kerfur-${{ matrix.artifact_name }}-${{ steps.get_version.outputs.VERSION }}.zip" "${{ env.source_folder }}*"
          elif [ "${{ runner.os }}" = "macOS" ]; then
            cd "${{ env.source_folder }}"
            tar -czf "../artifacts/Kerfur-${{ matrix.artifact_name }}-${{ steps.get_version.outputs.VERSION }}.tar.gz" *
          else
            cd "${{ env.source_folder }}"
            tar -czf "../artifacts/Kerfur-${{ matrix.artifact_name }}-${{ steps.get_version.outputs.VERSION }}.tar.gz" *
          fi

      - name: Package AppImage artifact (Linux only)
        if: runner.os == 'Linux' && matrix.artifact_name != 'web'
        shell: bash
        run: |
          mkdir -p appimage-artifacts
          if [ -f "Kerfur-${{ matrix.artifact_name }}-${{ steps.get_version.outputs.VERSION }}.AppImage" ]; then
            cp "Kerfur-${{ matrix.artifact_name }}-${{ steps.get_version.outputs.VERSION }}.AppImage" "appimage-artifacts/"
          fi

      - name: Package Installer
        if: matrix.artifact_name != 'web'
        shell: bash
        run: |
          mkdir -p installer-artifacts
          file=$(find . -maxdepth 1 -type f -name 'InstallKerfur-*' | head -n 1)
          if [ -n "$file" ]; then
            cp "$file" installer-artifacts/
          fi

      - name: Create and Upload Release
        if: "!(matrix.artifact_name == 'web') && startsWith(github.ref, 'refs/tags/v')"
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/*
            appimage-artifacts/*
            installer-artifacts/*
          name: Kerfur ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          tag_name: ${{ steps.get_version.outputs.VERSION }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Upload development artifacts
        if: "!(matrix.artifact_name == 'web') && !startsWith(github.ref, 'refs/tags/v')"
        uses: actions/upload-artifact@v4
        with:
          name: Kerfur-${{ matrix.artifact_name }}-${{ steps.get_version.outputs.VERSION }}
          path: artifacts/*
          retention-days: 1

      - name: Upload AppImage development artifacts (Linux only)
        if: runner.os == 'Linux' && matrix.artifact_name != 'web' && !startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: Kerfur-${{ matrix.artifact_name }}-AppImage-${{ steps.get_version.outputs.VERSION }}
          path: appimage-artifacts/*
          retention-days: 1

      - name: Upload Installer development artifacts
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: InstallKerfur-${{ matrix.artifact_name }}
          path: appimage-artifacts/*
          retention-days: 5
