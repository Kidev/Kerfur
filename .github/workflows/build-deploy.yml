name: Build and deploy

on:
  push:
    branches: ["main"]

jobs:
  build-and-deploy:
    name: "Build and deploy (${{ matrix.name }})"
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Linux x64"
            os: ubuntu-24.04
            qt_host: linux
            qt_target: desktop
            qt_arch: linux_gcc_64
            qt_modules: 'qtquick3d qtshadertools qtmultimedia qtquicktimeline'
            artifact_name: "linux-x64"
            build_command: "make desktop"

          - name: "Windows x64"
            os: windows-2025
            qt_host: windows
            qt_target: desktop
            qt_arch: win64_msvc2022_64
            qt_modules: 'qtquick3d qtshadertools qtmultimedia qtquicktimeline'
            artifact_name: "windows-x64"
            build_command: "make desktop"

          - name: "Windows ARM64"
            os: windows-11-arm
            qt_host: windows_arm64
            qt_target: desktop
            qt_arch: win64_msvc2022_arm64
            qt_modules: 'qtquick3d qtshadertools qtmultimedia qtquicktimeline'
            artifact_name: "windows-arm64"
            build_command: "make desktop"

          - name: "Linux ARM64"
            os: ubuntu-24.04-arm
            qt_host: linux_arm64
            qt_target: desktop
            qt_arch: linux_gcc_arm64
            qt_modules: 'qtquick3d qtshadertools qtmultimedia qtquicktimeline'
            artifact_name: "linux-arm64"
            build_command: "make desktop"

          - name: "macOS-15 ARM64"
            os: macos-15
            qt_host: mac
            qt_target: desktop
            qt_arch: clang_64
            qt_modules: 'qtquick3d qtshadertools qtmultimedia qtquicktimeline'
            artifact_name: "macos-15-arm64"
            build_command: "make desktop"

          - name: "macOS-13 x64"
            os: macos-13
            qt_host: mac
            qt_target: desktop
            qt_arch: clang_64
            qt_modules: 'qtquick3d qtshadertools qtmultimedia qtquicktimeline'
            artifact_name: "macos-13-x64"
            build_command: "make desktop"

          - name: "Web"
            os: ubuntu-24.04
            qt_host: all_os
            qt_target: wasm
            qt_arch: wasm_multithread
            qt_modules: 'qtquick3d qtshadertools qtmultimedia qtquicktimeline'
            artifact_name: "web"
            build_command: "make web"
            is_web: true

    env:
      qt_version: '6.8.3'
      qt_modules:  'qtquick3d qtshadertools qtmultimedia qtquicktimeline'
      target_folder: 'Kerfur'
      source_folder: '${{ github.workspace }}/install/'
      EMSDK: '${{ github.workspace }}/emsdk'

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: 'recursive'
          lfs: 'true'

      - name: Get latest CMake and Ninja
        uses: lukka/get-cmake@v4.0.2
        with:
            cmakeVersion: latest
            ninjaVersion: latest

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get -y install jq lftp brotli expect ccache

      - name: Setup MSVC
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2

      - name: Install Qt
        uses: Kidev/install-qt-action@v5
        with:
          version: ${{ env.qt_version }}
          host: ${{ matrix.qt_host }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          modules: ${{ env.qt_modules }}
          dir: ${{ github.workspace }}
          cache: 'true'
          cache-key-prefix: 'install-qt-${{ env.qt_version }}-${{ matrix.qt_arch }}'

      - name: Install Emscripten SDK (Web only)
        if: matrix.is_web
        shell: bash
        run: |
          make emsdk
          echo 'source "./emsdk/emsdk_env.sh"' >> "$GITHUB_PATH"

      - name: Get Version
        id: get_version
        shell: bash
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
            # Ensure VERSION always has 'v' prefix
            if [[ $TAG == v* ]]; then
              VERSION="$TAG"
              VERSION_TAG="${TAG#v}"
            else
              VERSION="v$TAG"
              VERSION_TAG="$TAG"
            fi
            echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
            echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_OUTPUT
          else
            # Get the latest "v" prefixed tag, or use "v0.0.0" if none exists
            LATEST_V_TAG=$(git describe --tags --match "v*" --abbrev=0 2>/dev/null || echo "v0.0.0")
            # Strip 'v' prefix from the tag for base version
            BASE_VERSION="${LATEST_V_TAG#v}"

            # Get numeric commit count since the latest tag (or since beginning if no tags)
            if git describe --tags --match "v*" --abbrev=0 >/dev/null 2>&1; then
              # Count commits since the latest v* tag
              TWEAK=$(git rev-list --count ${LATEST_V_TAG}..HEAD)
            else
              # No tags exist, count all commits
              TWEAK=$(git rev-list --count HEAD)
            fi

            # Construct development version
            VERSION="v${BASE_VERSION}-dev-${TWEAK}"
            VERSION_TAG="${BASE_VERSION}.${TWEAK}"
            echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
            echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_OUTPUT
          fi

      - name: Build
        shell: bash
        run: |
          ${{ matrix.build_command }} VERSION_TAG=${{ steps.get_version.outputs.VERSION_TAG }}

      - name: Upload to FTP (Web only)
        if: matrix.is_web
        shell: bash
        run: |
          lftp -u ${{ secrets.FTP_UPLOAD_USER }},${{ secrets.FTP_UPLOAD_PW }} ${{ secrets.FTP_UPLOAD_IP }} <<EOF
          set ssl:verify-certificate no
          mirror -R --only-newer --verbose ${{ env.source_folder }} ${{ env.target_folder }}
          quit
          EOF

      - name: Package artifacts
        if: "!matrix.is_web"
        shell: bash
        run: |
          mkdir -p artifacts
          if [ "${{ runner.os }}" = "Windows" ]; then
            # Windows: create zip
            7z a "artifacts/Kerfur-${{ matrix.artifact_name }}-${{ steps.get_version.outputs.VERSION }}.zip" "${{ env.source_folder }}*"
          elif [ "${{ runner.os }}" = "macOS" ]; then
            # macOS: create dmg or zip
            cd "${{ env.source_folder }}"
            tar -czf "../artifacts/Kerfur-${{ matrix.artifact_name }}-${{ steps.get_version.outputs.VERSION }}.tar.gz" *
          else
            # Linux: create AppImage or tar.gz
            cd "${{ env.source_folder }}"
            tar -czf "../artifacts/Kerfur-${{ matrix.artifact_name }}-${{ steps.get_version.outputs.VERSION }}.tar.gz" *
          fi

      - name: Create and Upload Release
        if: "!matrix.is_web && startsWith(github.ref, 'refs/tags/')"
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*
          name: Kerfur ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          tag_name: ${{ steps.get_version.outputs.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload development artifacts
        if: "!matrix.is_web && !startsWith(github.ref, 'refs/tags/')"
        uses: actions/upload-artifact@v4
        with:
          name: Kerfur-${{ matrix.artifact_name }}-${{ steps.get_version.outputs.VERSION }}
          path: artifacts/*
          retention-days: 30
